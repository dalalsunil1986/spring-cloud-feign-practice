#If you prefer using configuration properties to configured all @FeignClient,
#you can create configuration properties with default feign name.
#모든 FeignClient에 적용하려면 feigName을 default라 하면 된다.
spring:
  application:
    name: Feign-Client
  profiles:
    active: debug

#datasource
  datasource:
    url: jdbc:mysql://localhost:3306/sw?serverTimezone=UTC
    username: root
    password: tkdals12
    #driver-class-name: com.mysql.jdbc.Driver
    hikari:
      maximum-pool-size: 10
  #JPA
  jpa:
    hibernate:
      ddl-auto: create-drop
    #show-sql: true #this is the simplest way to dump the queries
    properties:
      hibernate:
        show_sql: true
        use_sql_comments: true
        format_sql: true #jpa.properties.hibernate.format_sql = true <- th beautify or pretty print hte SQL

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic

  #To enable Hystrix in Feign
  #If Hystrix is on the classpath and feign.hystrix.enabled=true,
  #Feign will wrap all methods with a circuit breaker.
  #Returning a com.netflix.hystrix.HystrixCommand is also available.

  hystrix:
    enabled: true
    command:
      default:
        execution:
          isolation:
            strategy: THREAD

eureka:
  instance:
    hostname: localhost
    lease-renewal-interval-in-seconds: 10
    metadata-map:
      instanceId: ${spring.application.name}:${server.port}
    instance-id: ${spring.application.name}:${server.port}
  client:
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8081/eureka/
      preferSameZoneEureka: true

server:
  port:
    8080

---

spring:
  application:
    name: Feign-Client
  profiles: develop

  #datasource
  datasource:
    url: jdbc:mysql://localhost:3306/sw?serverTimezone=UTC
    username: root
    password: tkdals12
    driver-class-name: com.mysql.jdbc.Driver
    hikari:
      maximum-pool-size: 10
  #JPA
  jpa:
    hibernate:
      ddl-auto: create-drop
    #show-sql: true #this is the simplest way to dump the queries
    properties:
      hibernate:
        show_sql: true
        use_sql_comments: true
        format_sql: true #jpa.properties.hibernate.format_sql = true <- th beautify or pretty print hte SQL

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic

  #To enable Hystrix in Feign
  #If Hystrix is on the classpath and feign.hystrix.enabled=true,
  #Feign will wrap all methods with a circuit breaker.
  #Returning a com.netflix.hystrix.HystrixCommand is also available.

  hystrix:
    enabled: true
    command:
      default:
        execution:
          isolation:
            strategy: THREAD

eureka:

  instance:
    hostname: ec2-13-209-133-18.ap-northeast-2.compute.amazonaws.com
    lease-renewal-interval-in-seconds: 10
    metadata-map:
      instanceId: ${spring.application.name}:${server.port}
  client:
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8081/eureka/
      preferSameZoneEureka: true

server:
  port:
    8080

#we can log the SQL statements by configuring loggers in the properties file
#logging:
#  level:
#    org:
#      hibernate:
#        SQL = DEBUG #this is logs the SQL Queries,
#      type:
#        descriptor:
#          sql:
#            BasicBinder = TRACE #this is logs the prepared statement parameters.
---
# below is the default values in @EnabledFeignClient
#
#spring:
#  profiles:
#    active: feign-default
#
#feign:
#  client:
#    config:
#      feignName:
#        connectTimeout: 5000
#        readTimeout: 5000
#        loggerLevel: full
#        errorDecoder: com.example.SimpleErrorDecoder
#        retryer: com.example.SimpleRetryer
#        requestInterceptors:
#          - com.example.FooRequestInterceptor
#          - com.example.BarRequestInterceptor
#        decode404: false
#        encoder: com.example.SimpleEncoder
#        decoder: com.example.SimpleDecoder
#        contract: com.example.SimpleContract
